import {Router} from "express";
import {authMiddleware} from "../middleware/index.js";
import {promptController} from "../controllers/index.js";


const promptRoute: Router = Router();

/**
 * @swagger
 * /generate:
 *   post:
 *     summary: Generate a response from Gemini based on the provided prompt
 *     tags:
 *       - Prompts
 *     security:
 *       - cookieAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               prompt:
 *                 type: object
 *                 required:
 *                   - role
 *                   - context
 *                   - task
 *                   - output
 *                   - constraints
 *                   - language
 *                 properties:
 *                   role:
 *                     type: string
 *                     example: Developer
 *                   context:
 *                     type: string
 *                     example: Build a login feature
 *                   task:
 *                     type: string
 *                     example: Write backend logic
 *                   output:
 *                     type: string
 *                     example: Express route for authentication
 *                   constraints:
 *                     type: string
 *                     example: No third-party auth packages
 *                   language:
 *                     type: string
 *                     enum: [EN, ES, FR]
 *                     example: EN
 *     responses:
 *       200:
 *         description: Successful generation
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 geminiText:
 *                   type: string
 *                 geminiSummary:
 *                   type: string
 *       400:
 *         description: Prompt missing or invalid
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Server error
 */
promptRoute.post("/generate", authMiddleware, promptController.generatePrompt);

/**
 * @swagger
 * /save:
 *   post:
 *     summary: Save a Gemini-generated prompt
 *     description: Persists a prompt generated by Gemini with metadata such as score, userId, and timestamps. Returns the saved Prompt model.
 *     tags:
 *       - Prompts
 *     security:
 *       - cookieAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               prompt:
 *                 type: object
 *                 required:
 *                   - role
 *                   - context
 *                   - task
 *                   - output
 *                   - constraints
 *                   - language
 *                   - score
 *                   - geminiText
 *                   - geminiSummary
 *                 properties:
 *                   role:
 *                     type: string
 *                     example: Developer
 *                   context:
 *                     type: string
 *                     example: Build a login feature
 *                   task:
 *                     type: string
 *                     example: Write backend logic
 *                   output:
 *                     type: string
 *                     example: Express route for authentication
 *                   constraints:
 *                     type: string
 *                     example: No third-party auth packages
 *                   language:
 *                     type: string
 *                     enum: [EN, ES, FR]
 *                     example: EN
 *                   score:
 *                     type: integer
 *                     example: 5
 *                   geminiText:
 *                     type: string
 *                     example: This is the full Gemini response.
 *                   geminiSummary:
 *                     type: string
 *                     example: Short summary of the response
 *     responses:
 *       200:
 *         description: Prompt saved successfully and returned with metadata
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Prompt'
 *             example:
 *               id: "a1b2c3d4-e5f6-7890-abcd-1234567890ef"
 *               userId: "user-123"
 *               role: "Developer"
 *               context: "Build a login feature"
 *               task: "Write backend logic"
 *               output: "Express route for authentication"
 *               constraints: "No third-party auth packages"
 *               language: "EN"
 *               score: 5
 *               geminiText: "This is the full Gemini response."
 *               geminiSummary: "Short summary of the response"
 *               createdAt: "2025-04-04T12:00:00Z"
 *       400:
 *         description: Invalid or missing prompt data
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: "Prompt is required"
 *       401:
 *         description: Unauthorized - user not authenticated
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: "Unauthorized"
 *       500:
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: "Something went wrong"
 */
promptRoute.post("/save", authMiddleware, promptController.savePrompt);

/**
 * @swagger
 * /{promptId}:
 *   get:
 *     summary: Get a specific saved prompt by ID
 *     description: Retrieves a single prompt belonging to the authenticated user by prompt ID.
 *     tags:
 *       - Prompts
 *     security:
 *       - cookieAuth: []
 *     parameters:
 *       - in: path
 *         name: promptId
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: The unique identifier of the prompt
 *     responses:
 *       200:
 *         description: Prompt successfully retrieved
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 prompt:
 *                   $ref: '#/components/schemas/Prompt'
 *             example:
 *               prompt:
 *                 id: "a1b2c3d4-e5f6-7890-abcd-1234567890ef"
 *                 userId: "user-123"
 *                 role: "Developer"
 *                 context: "Build a login feature"
 *                 task: "Write backend logic"
 *                 output: "Express route for authentication"
 *                 constraints: "No third-party auth packages"
 *                 language: "EN"
 *                 score: 5
 *                 geminiText: "This is the full Gemini response."
 *                 geminiSummary: "Short summary of the response"
 *                 createdAt: "2025-04-04T12:00:00Z"
 *       400:
 *         description: Missing userId or promptId
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Missing userId or promptId
 *       404:
 *         description: Prompt not found
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Prompt not found
 *       500:
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Internal server error
 */
promptRoute.get("/:promptId", authMiddleware, promptController.getPrompt);

/**
 * @swagger
 * /prompts:
 *   get:
 *     summary: Get all prompts for the authenticated user
 *     description: Returns an array of prompts created by the current user.
 *     tags:
 *       - Prompts
 *     security:
 *       - cookieAuth: []
 *     responses:
 *       200:
 *         description: A list of prompts
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Prompt'
 *             example:
 *               - id: "a1b2c3d4-e5f6-7890-abcd-1234567890ef"
 *                 userId: "user-123"
 *                 role: "Developer"
 *                 context: "Build a login feature"
 *                 task: "Write backend logic"
 *                 output: "Express route for authentication"
 *                 constraints: "No third-party auth packages"
 *                 language: "EN"
 *                 score: 5
 *                 geminiText: "This is the full Gemini response."
 *                 geminiSummary: "Short summary of the response"
 *                 createdAt: "2025-04-04T12:00:00Z"
 *               - id: "b2c3d4e5-f6a7-8901-bcde-234567890abc"
 *                 userId: "user-123"
 *                 role: "Product Manager"
 *                 context: "Plan a new feature"
 *                 task: "Write feature summary"
 *                 output: "A structured summary document"
 *                 constraints: "No technical jargon"
 *                 language: "EN"
 *                 score: 4
 *                 geminiText: "This is another Gemini response."
 *                 geminiSummary: "Another short summary"
 *                 createdAt: "2025-04-04T13:00:00Z"
 *       401:
 *         description: Unauthorized
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: Unauthorized
 *       500:
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: Internal server error
 */
promptRoute.get("/", authMiddleware, promptController.getAllPrompts);

/**
 * @swagger
 * /prompts/{promptId}:
 *   put:
 *     summary: Update the score of an existing prompt
 *     description: Updates the score of a prompt identified by its ID and returns the updated prompt object.
 *     tags:
 *       - Prompts
 *     security:
 *       - cookieAuth: []
 *     parameters:
 *       - in: path
 *         name: promptId
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: The ID of the prompt to update
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - score
 *             properties:
 *               score:
 *                 type: integer
 *                 example: 4
 *                 description: New score value for the prompt
 *     responses:
 *       200:
 *         description: Updated prompt with new score
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Prompt'
 *             example:
 *               id: "a1b2c3d4-e5f6-7890-abcd-1234567890ef"
 *               userId: "user-123"
 *               role: "Developer"
 *               context: "Build a login feature"
 *               task: "Write backend logic"
 *               output: "Express route for authentication"
 *               constraints: "No third-party auth packages"
 *               language: "EN"
 *               score: 4
 *               geminiText: "This is the updated Gemini response."
 *               geminiSummary: "Updated summary of the response"
 *               createdAt: "2025-04-04T12:00:00Z"
 *       400:
 *         description: Missing or invalid score
 *       401:
 *         description: Unauthorized – token missing or invalid
 *       404:
 *         description: Prompt not found or not authorized
 *       500:
 *         description: Internal server error
 */
promptRoute.put("/:promptId", authMiddleware, promptController.updateScorePrompt);


/**
 * @swagger
 * /prompts:
 *   delete:
 *     summary: Delete all prompts for the authenticated user
 *     tags: [Prompts]
 *     security:
 *       - cookieAuth: []
 *     responses:
 *       204:
 *         description: All prompts deleted successfully
 *       400:
 *         description: Missing userId or promptId
 *       500:
 *         description: Internal server error
 */
promptRoute.delete("/", authMiddleware, promptController.deleteAllPrompts);

/**
 * @swagger
 * /prompts/{promptId}:
 *   delete:
 *     summary: Delete a specific prompt by ID
 *     tags: [Prompts]
 *     security:
 *       - cookieAuth: []
 *     parameters:
 *       - in: path
 *         name: promptId
 *         required: true
 *         schema:
 *           type: string
 *         description: ID of the prompt to delete
 *     responses:
 *       204:
 *         description: Prompt deleted successfully
 *       400:
 *         description: Missing userId or promptId
 *       404:
 *         description: Prompt not found or not authorized
 *       500:
 *         description: Internal server error
 */
promptRoute.delete("/:promptId", authMiddleware, promptController.deletePrompt);


export {promptRoute};
