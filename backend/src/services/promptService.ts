import prisma from "../prisma.js";
import {CreatePromptInput} from "../types/promptTypes.js";
import {SavePromptOutputInput} from "../types/outputTypes.js";
import {PromptOutput} from "@prisma/client";

/**
 * Creates a new prompt in the database and links it to the specified user.
 *
 * @param userId - The ID of the user creating the prompt.
 * @param data - The prompt input data including role, context, task, etc.
 * @returns The created prompt object from the database.
 */
export const createPromptService = async (userId: string | undefined, data: CreatePromptInput) => {
    const createdPrompt = await prisma.prompt.create({
        data: {
            user: { connect: { id: userId } },
            ...data,
        },
    });

    return createdPrompt;
};


export const getPromptService = async (userId: string, promptId: string) => {
    const prompt = await prisma.prompt.findUnique({
        where: { id: promptId, userId: userId },
    });

    return prompt;
};

/**
 * Saves the output generated by the AI for a specific prompt.
 *
 * @param data - The output data to save, including prompt ID, user ID, generated content, metadata, and version.
 * @returns The saved PromptOutput object from the database.
 * @throws Will throw an error if the save operation fails.
 */
export const savePromptOutputService = async (
    data: SavePromptOutputInput
): Promise<PromptOutput> => {
    try {
        const saved = await prisma.promptOutput.create({
            data: {
                userId: data.userId,
                promptId: data.promptId,
                content: data.content,
                metadata: data.metadata || {},
                version: data.version ?? 1,
            },
        });

        return saved;
    } catch (error) {
        console.error("Error saving prompt output:", error);
        throw new Error("Failed to save prompt output");
    }
};